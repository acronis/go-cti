#%RAML 1.0 Library

uses:
  scalar: scalar.raml

annotationTypes:
  description:
    type: boolean
    description: >-
      Type field could be marked with this annotation to indicate the value of that field will be used
      as `description` for CTI instance.
      For CTI types RAML facet `description` is used for the same purpose.
      Deprecated: use type `Instance` to describe CTI instance.
    allowedTargets: TypeDeclaration

  resilient:
    type: boolean
    description: >
      Indicates that the entity cannot be in DISABLE/TEMPORARY_DISABLED state.
    allowedTargets: TypeDeclaration

  access:
    type: AccessModifier
    description: Applies an access rule to the CTI.
    default: protected
    allowedTargets: TypeDeclaration

  access_field:
    type: boolean
    description: Marks a field that specifies the access control rule of the created CTI instance.

  display_name:
    type: boolean
    description: >-
      Type field could be marked with this annotation to indicate the value of that field will be used
      as `display_name` for CTI instance.
      For CTI types RAML facet `displayName` is used for the same purpose.
      By default, if not set RAML type name will be used as `display_name` of CTI type.
      Deprecated: use type `Instance` to describe CTI instance.
    allowedTargets: TypeDeclaration

  cti:
    type: CTI[] | CTI
    description: >
      Indicates that RAML object represents cti entity (type or instance).
      RAML objects can have more than one cti entity. When version upgrade is required all the cti entities should be upgraded.
    allowedTargets: TypeDeclaration

  id:
    type: boolean
    description: >
      Indicates that the field value represents cti entity id. If entity is type it also this field also could be used as discriminator.
      Deprecated: use type `Instance` to describe CTI instance.
    allowedTargets: TypeDeclaration

  final:
    type: boolean
    description: Indicates that an entity cannot be inherited in case of CTI type. All CTI instances is final by default.
    default: true
    allowedTargets: TypeDeclaration

  reference:
    type: CTIWildcard | CTIWildcard[] | boolean
    description: >
      Defines that field value refers to cti entity.
      `true` value indicates that the annotated field is referencing some unspecified CTI entity.
    allowedTargets: TypeDeclaration

  schema:
    type: CTIAttribute | (CTIAttribute | nil)[]
    description: >
      Following annotation could be applied to the field with `object` type to define that this object schema should conform schema of cti type referenced
      in annotation value. It is an error if entity CTI is provided as a value.
    examples:
      Nullable anyOf:
      - cti.a.p.wm.workload.v1.0~a.p.aspect.v1.0~a.p.machine.v1.0@id
      - null
      anyOf:
      - cti.a.p.wm.workload.v1.0~a.p.aspect.v1.0~a.p.machine.v1.0
      - cti.a.p.wr.report_config.v1.0

  embed:
    type: string
    description: >
      Is applicable for type fields. It denotes the field is referencing an external content defined by the type should be embedded
      e.g. `(cti.embed): DictionaryData[]` represents DictionaryData[] content should be embedded in the field where it is used.
    allowedTargets: TypeDeclaration

  overridable:
    type: boolean
    description: >
      Indicates that new compliant schema could be applied to the property in derived types.
      A new compliant schema could be applied to the property in derived types. By default, all fields are not overridable.
      If an optional field marked by overridable is not presented in inherited type that means such field should not be presented
      in instances of such type.
    allowedTargets: TypeDeclaration

  asset:
    type: boolean
    description: >
      Indicates that field contains local path to binary asset.
      Could be used for special processing then package is deployed.
    default: false
    allowedTargets: TypeDeclaration

  l10n:
    type: boolean
    description: |
      Indicates field with this annotation may be localized, dictionary key would be the value in english language of this field.
      It will be used in conjunction with type `L10NType`. Types with fields supporting localization needs to support `L10NType`'s interface.
    allowedTargets: TypeDeclaration

types:
  CTI:
    type: scalar.string1024
    pattern: ^cti\.([a-z][a-z0-9_]*\.[a-z][a-z0-9_]*\.[a-z_][a-z0-9_.]*\.v[\d]+\.[\d]+)(~([a-z][a-z0-9_]*\.[a-z][a-z0-9_]*\.[a-z_][a-z0-9_.]*\.v[\d]+\.[\d]+))*(~[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12})?$
    description: |
      ID used in CTI Package to uniquely identify an entity either type or instance.

      Generic format - `cti.<ctx>[~<ctx>]*[~(<ctx>|<uuid>)]`

      * `<ctx>` - `<package id>.<name>.v<major>.<minor>`
      * `<vendor>` - vendor's short code (max 50 characters)
      * `<package id>` - short code (max 101 characters) consisting of two dot  separated  fragments
      * `v<major>.<minor>` - entity's version

      Better regex pattern (for advanced regex processors)
        `^cti\.(?'ctx'[a-z][a-z0-9_]{0,49}\.[a-z][a-z0-9_]{0,49}\.[a-z][a-z0-9_.]{1,127}\.v[\d]+\.[\d]+)(~(?&ctx))*(~[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12})?$`

    examples:
      1: cti.a.p.xx.v1.0
      2: cti.a.p.xx.v1.0~x.y.name.v1.23
      3: cti.a.p.xx.v1.0~6e4f419f-4bf7-494f-a4b5-3e95eb464fc5
      4: cti.a.p.xx.v1.0~vendor.app.yy.v1.0
      5: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.0
      6: cti.a.p.wm.workload.v1.0~a.p.wm.aspect.v1.0~a.p.machine.v1.0
      7: cti.a.p.stm.s3_buckets_pool.v1.0~my_vendor.my_app.assets.v1.0

  CTIWildcard:
    type: scalar.string1024
    pattern: ^cti((\.([a-z][a-z0-9_]*))|\.)?(\.([a-z][a-z0-9_]*))?(\.([a-z_][a-z0-9_.]*))?(\.v(\d+|\d*\.\d*|\d*\.)?)?(~(([a-z][a-z0-9_]*)|([a-z][a-z0-9_]*)\.)?(\.([a-z][a-z0-9_]*))?(\.([a-z_][a-z0-9_.]*))?(\.v(\d+|\d*\.\d*|\d*\.)?)?)*\*$|^cti\.([a-z][a-z0-9_]*\.[a-z][a-z0-9_]*\.[a-z_][a-z0-9_.]*\.v[\d]+\.[\d]+)(~([a-z][a-z0-9_]*\.[a-z][a-z0-9_]*\.[a-z_][a-z0-9_.]*\.v[\d]+\.[\d]+))*(~[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12})?$
    description: |
      CTI with wildcard support, where the wildcard `*` can only be used as the final character of a segment.
    examples:
      1: cti.a.p.wr.report_config.v1.0
      2: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.0
      3: cti.a.p.xx.v1.0~6e4f419f-4bf7-494f-a4b5-3e95eb464fc5
      4: cti.*
      5: cti.a.*
      6: cti.a.p.*
      7: cti.a.p.wr.*
      8: cti.a.p.wr.report_config.*
      9: cti.a.p.wr.report_config.v*
      10: cti.a.p.wr.report_config.v1.*
      11: cti.a.p.wr.report_config.v1.0~*
      12: cti.a.p.wr.report_config.v1.0~a.*
      13: cti.a.p.wr.report_config.v1.0~a.p.*
      14: cti.a.p.wr.report_config.v1.0~a.p.mc.*
      15: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.*
      16: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v*
      17: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.*
      18: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.0~*
      19: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.0~a.*
      20: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.0~a.p.*
      21: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.0~a.p.mc.*
      22: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.0~a.p.mc.alerts_report.*
      23: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.0~a.p.mc.alerts_report.v*
      24: cti.a.p.wr.report_config.v1.0~a.p.mc.alerts_report.v1.0~a.p.mc.alerts_report.v1.*

  CTIAttribute:
    type: scalar.string1024
    pattern: ^cti\.([a-z][a-z0-9_]*\.[a-z][a-z0-9_]*\.[a-z_][a-z0-9_.]*\.v[\d]+\.[\d]+)(~([a-z][a-z0-9_]*\.[a-z][a-z0-9_]*\.[a-z_][a-z0-9_.]*\.v[\d]+\.[\d]+))*(~[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12})?(@[\w.]+)?$
    description: |
      To reference attributes in CTI, use a path notation separated by `@`, with object properties divided by `.`.
      The target property appears at the end of this path. For instance:

      Given a Workload object like:
      ```JSON
        {
          "id": "0598cb6d-0a5d-4260-b918-0b522e42eb85",
          "attributes": {
            "version": "v1.0",
            "agent": {
              "component": "Total Protection"
            }
          }
        }
      ```

      * To access the "component" attribute, use @attributes.agent.component.
      * To retrieve the "id" attribute, specify @id.
      * For the "version" attribute, use @attributes.version.

      This notation ensures precise and structured access to specific properties.
    examples:
      1: cti.a.p.wm.workload.v1.0~a.p.wm.aspect.v1.0~a.p.machine.v1.0@attributes.agent.component
      2: cti.a.p.wm.workload.v1.0~a.p.aspect.v1.0~a.p.machine.v1.0@attributes.version
      3: cti.a.p.wm.workload.v1.0~a.p.aspect.v1.0~a.p.machine.v1.0@id

  schema: |
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object"
    }

  uri: |
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "string",
      "format": "uri"
    }

  JSONPath:
    description: Path in JSON Path format (https://datatracker.ietf.org/doc/draft-ietf-jsonpath-base/).
    type: scalar.string2K
    # According to RFC 2.2. Root Identifier each JSONPath query must start with '$'.
    pattern: ^\$.*$

  Instance:
    description: |
      CTI instance is an object that represents a specific entity of a CTI type.
      CTI instance is identified by the `id` field that contains the CTI of the instance.
      CTI instance must have a `description` field that contains the description of the instance.
      CTI instance must have a `values` field that contains the value of the instance which can be narrowed down to a specific schema.
      CTI instance might have a `display_name` field that contains the display name of the instance.
    additionalProperties: false
    properties:
      id:
        type: CTI
        description: |
          The unique identifier of the CTI instance.
          The value of this field is a CTI ID that uniquely identifies the instance.
          The value of this field is a string that conforms to the CTI pattern.
      values:
        type: any
        description: |
          The value of the CTI instance.
          The value of this field is the value of the instance.
          You can override that field to define the schema to help the user to understand the value and validate it.
      description:
        type: scalar.string2048
        description: |
          The description of the CTI instance.
          The value of this field is a string that describes the instance.
      display_name?:
        type: scalar.string1024
        description: |
          The display name of the CTI instance.
          The value of this field is a string that represents the display name of the instance.
    examples:
      1:
        id: cti.foo.bar.name.v1.0~x.y.kirill.v1.0
        values: Kirill
        description: The name of the person
        display_name: The name is Kirill
      2:
        id: cti.foo.bar.salary.v1.0~x.y.kirill.v1.0
        values: 100500
        description: The salary of the person
        display_name: The salary is 100500
      3:
        id: cti.foo.bar.is_active.v1.0~x.y.kirill.v1.0
        values: true
        description: The person is active
        display_name: The person is active
      4:
        id: cti.foo.bar.info.v1.0~x.y.kirill.v1.0
        values:
          name: Kirill
          salary: 100500
          is_active: true
        description: The information about the person
        display_name: The info of Kirill

  AccessModifier:
    type: string
    description: |
      Access modifier for CTI entity.
      It defines the availability of the entity in the system as follows:

      * Public - allowed to be referenced by anyone.
      * Protected - allowed to be referenced only by the same vendor.
      * Private - allowed to be referenced only by the same package.
    enum:
    - public
    - protected
    - private